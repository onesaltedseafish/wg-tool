// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protocols/wg.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WireguardTool_RegisterPeer_FullMethodName   = "/protocol.WireguardTool/RegisterPeer"
	WireguardTool_UnregisterPeer_FullMethodName = "/protocol.WireguardTool/UnregisterPeer"
)

// WireguardToolClient is the client API for WireguardTool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireguardToolClient interface {
	RegisterPeer(ctx context.Context, in *RegisterPeerReq, opts ...grpc.CallOption) (*RegisterPeerRsp, error)
	UnregisterPeer(ctx context.Context, in *UnregisterPeerReq, opts ...grpc.CallOption) (*EmptyRsp, error)
}

type wireguardToolClient struct {
	cc grpc.ClientConnInterface
}

func NewWireguardToolClient(cc grpc.ClientConnInterface) WireguardToolClient {
	return &wireguardToolClient{cc}
}

func (c *wireguardToolClient) RegisterPeer(ctx context.Context, in *RegisterPeerReq, opts ...grpc.CallOption) (*RegisterPeerRsp, error) {
	out := new(RegisterPeerRsp)
	err := c.cc.Invoke(ctx, WireguardTool_RegisterPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardToolClient) UnregisterPeer(ctx context.Context, in *UnregisterPeerReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, WireguardTool_UnregisterPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireguardToolServer is the server API for WireguardTool service.
// All implementations must embed UnimplementedWireguardToolServer
// for forward compatibility
type WireguardToolServer interface {
	RegisterPeer(context.Context, *RegisterPeerReq) (*RegisterPeerRsp, error)
	UnregisterPeer(context.Context, *UnregisterPeerReq) (*EmptyRsp, error)
	mustEmbedUnimplementedWireguardToolServer()
}

// UnimplementedWireguardToolServer must be embedded to have forward compatible implementations.
type UnimplementedWireguardToolServer struct {
}

func (UnimplementedWireguardToolServer) RegisterPeer(context.Context, *RegisterPeerReq) (*RegisterPeerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPeer not implemented")
}
func (UnimplementedWireguardToolServer) UnregisterPeer(context.Context, *UnregisterPeerReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPeer not implemented")
}
func (UnimplementedWireguardToolServer) mustEmbedUnimplementedWireguardToolServer() {}

// UnsafeWireguardToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireguardToolServer will
// result in compilation errors.
type UnsafeWireguardToolServer interface {
	mustEmbedUnimplementedWireguardToolServer()
}

func RegisterWireguardToolServer(s grpc.ServiceRegistrar, srv WireguardToolServer) {
	s.RegisterService(&WireguardTool_ServiceDesc, srv)
}

func _WireguardTool_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardToolServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireguardTool_RegisterPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardToolServer).RegisterPeer(ctx, req.(*RegisterPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireguardTool_UnregisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardToolServer).UnregisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireguardTool_UnregisterPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardToolServer).UnregisterPeer(ctx, req.(*UnregisterPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WireguardTool_ServiceDesc is the grpc.ServiceDesc for WireguardTool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireguardTool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WireguardTool",
	HandlerType: (*WireguardToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPeer",
			Handler:    _WireguardTool_RegisterPeer_Handler,
		},
		{
			MethodName: "UnregisterPeer",
			Handler:    _WireguardTool_UnregisterPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/wg.proto",
}
