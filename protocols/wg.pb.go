// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: protocols/wg.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义Wireguard peer类型
// 指的注意的是，这个类型是我们定义的， 并不代表着wireguard存在这种类型抽象
type PeerType int32

const (
	PeerType_Unknown PeerType = 0
	// 点对点类型
	PeerType_P2P PeerType = 1
	// 子网类型
	PeerType_SubNet PeerType = 2
)

// Enum value maps for PeerType.
var (
	PeerType_name = map[int32]string{
		0: "Unknown",
		1: "P2P",
		2: "SubNet",
	}
	PeerType_value = map[string]int32{
		"Unknown": 0,
		"P2P":     1,
		"SubNet":  2,
	}
)

func (x PeerType) Enum() *PeerType {
	p := new(PeerType)
	*p = x
	return p
}

func (x PeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocols_wg_proto_enumTypes[0].Descriptor()
}

func (PeerType) Type() protoreflect.EnumType {
	return &file_protocols_wg_proto_enumTypes[0]
}

func (x PeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerType.Descriptor instead.
func (PeerType) EnumDescriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{0}
}

type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{0}
}

// 定义如何注册一个Peer节点
type RegisterPeerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点名
	PeerName string `protobuf:"bytes,1,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	// 节点类型
	PeerType PeerType `protobuf:"varint,2,opt,name=peer_type,json=peerType,proto3,enum=protocol.PeerType" json:"peer_type,omitempty"`
	// 子网地址
	SubNets []*CidrAddress `protobuf:"bytes,3,rep,name=sub_nets,json=subNets,proto3" json:"sub_nets,omitempty"`
}

func (x *RegisterPeerReq) Reset() {
	*x = RegisterPeerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeerReq) ProtoMessage() {}

func (x *RegisterPeerReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeerReq.ProtoReflect.Descriptor instead.
func (*RegisterPeerReq) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterPeerReq) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *RegisterPeerReq) GetPeerType() PeerType {
	if x != nil {
		return x.PeerType
	}
	return PeerType_Unknown
}

func (x *RegisterPeerReq) GetSubNets() []*CidrAddress {
	if x != nil {
		return x.SubNets
	}
	return nil
}

// 定义节点返回的信息
type RegisterPeerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点公钥
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// 节点私钥
	Prikey string `protobuf:"bytes,2,opt,name=prikey,proto3" json:"prikey,omitempty"`
	// 节点地址
	Address *CidrAddress `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 中继节点信息
	RelayPeerInfo *RelayPeerInfo `protobuf:"bytes,4,opt,name=relay_peer_info,json=relayPeerInfo,proto3" json:"relay_peer_info,omitempty"`
}

func (x *RegisterPeerRsp) Reset() {
	*x = RegisterPeerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeerRsp) ProtoMessage() {}

func (x *RegisterPeerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeerRsp.ProtoReflect.Descriptor instead.
func (*RegisterPeerRsp) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterPeerRsp) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *RegisterPeerRsp) GetPrikey() string {
	if x != nil {
		return x.Prikey
	}
	return ""
}

func (x *RegisterPeerRsp) GetAddress() *CidrAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RegisterPeerRsp) GetRelayPeerInfo() *RelayPeerInfo {
	if x != nil {
		return x.RelayPeerInfo
	}
	return nil
}

type CidrAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CidrAddress) Reset() {
	*x = CidrAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CidrAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CidrAddress) ProtoMessage() {}

func (x *CidrAddress) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CidrAddress.ProtoReflect.Descriptor instead.
func (*CidrAddress) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{3}
}

func (x *CidrAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 中继节点信息
type RelayPeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relay peer的端点信息
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 公钥
	Pubkey string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *RelayPeerInfo) Reset() {
	*x = RelayPeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayPeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayPeerInfo) ProtoMessage() {}

func (x *RelayPeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayPeerInfo.ProtoReflect.Descriptor instead.
func (*RelayPeerInfo) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{4}
}

func (x *RelayPeerInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RelayPeerInfo) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

// 定义如何注册一个Peer节点
type UnregisterPeerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点名
	PeerName string `protobuf:"bytes,1,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
}

func (x *UnregisterPeerReq) Reset() {
	*x = UnregisterPeerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_wg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterPeerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterPeerReq) ProtoMessage() {}

func (x *UnregisterPeerReq) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_wg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterPeerReq.ProtoReflect.Descriptor instead.
func (*UnregisterPeerReq) Descriptor() ([]byte, []int) {
	return file_protocols_wg_proto_rawDescGZIP(), []int{5}
}

func (x *UnregisterPeerReq) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

var File_protocols_wg_proto protoreflect.FileDescriptor

var file_protocols_wg_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x77, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x0a,
	0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x5f, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x73, 0x22, 0xb3,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x69, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x69, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x69, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x43, 0x69, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x22, 0x30, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x2c, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x32, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74,
	0x10, 0x02, 0x32, 0x9c, 0x01, 0x0a, 0x0d, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x6e, 0x65, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x73, 0x65, 0x61, 0x66, 0x69, 0x73, 0x68,
	0x2f, 0x77, 0x67, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_wg_proto_rawDescOnce sync.Once
	file_protocols_wg_proto_rawDescData = file_protocols_wg_proto_rawDesc
)

func file_protocols_wg_proto_rawDescGZIP() []byte {
	file_protocols_wg_proto_rawDescOnce.Do(func() {
		file_protocols_wg_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_wg_proto_rawDescData)
	})
	return file_protocols_wg_proto_rawDescData
}

var file_protocols_wg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protocols_wg_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protocols_wg_proto_goTypes = []interface{}{
	(PeerType)(0),             // 0: protocol.PeerType
	(*EmptyRsp)(nil),          // 1: protocol.EmptyRsp
	(*RegisterPeerReq)(nil),   // 2: protocol.RegisterPeerReq
	(*RegisterPeerRsp)(nil),   // 3: protocol.RegisterPeerRsp
	(*CidrAddress)(nil),       // 4: protocol.CidrAddress
	(*RelayPeerInfo)(nil),     // 5: protocol.RelayPeerInfo
	(*UnregisterPeerReq)(nil), // 6: protocol.UnregisterPeerReq
}
var file_protocols_wg_proto_depIdxs = []int32{
	0, // 0: protocol.RegisterPeerReq.peer_type:type_name -> protocol.PeerType
	4, // 1: protocol.RegisterPeerReq.sub_nets:type_name -> protocol.CidrAddress
	4, // 2: protocol.RegisterPeerRsp.address:type_name -> protocol.CidrAddress
	5, // 3: protocol.RegisterPeerRsp.relay_peer_info:type_name -> protocol.RelayPeerInfo
	2, // 4: protocol.WireguardTool.RegisterPeer:input_type -> protocol.RegisterPeerReq
	6, // 5: protocol.WireguardTool.UnregisterPeer:input_type -> protocol.UnregisterPeerReq
	3, // 6: protocol.WireguardTool.RegisterPeer:output_type -> protocol.RegisterPeerRsp
	1, // 7: protocol.WireguardTool.UnregisterPeer:output_type -> protocol.EmptyRsp
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_protocols_wg_proto_init() }
func file_protocols_wg_proto_init() {
	if File_protocols_wg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_wg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_wg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_wg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_wg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CidrAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_wg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayPeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_wg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterPeerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_wg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocols_wg_proto_goTypes,
		DependencyIndexes: file_protocols_wg_proto_depIdxs,
		EnumInfos:         file_protocols_wg_proto_enumTypes,
		MessageInfos:      file_protocols_wg_proto_msgTypes,
	}.Build()
	File_protocols_wg_proto = out.File
	file_protocols_wg_proto_rawDesc = nil
	file_protocols_wg_proto_goTypes = nil
	file_protocols_wg_proto_depIdxs = nil
}
